library(powers)
fbind()
?fbind
document()
document()
library(devtools)
document()
fbind()
library(powers)
fbind()
install.packages("roxygen2")
library(devtools)
document()
fbind()
library(powers)
?fbind()
document()
library(powers)
?boxcox
boxcox(1:10, 2, 0, TRUE)
boxcox(x=1:10, lambda=2, delta=0, plot_it=TRUE)
document()
library(powers)
boxcox()
boxcox(1:10, 2, 0, TRUE)
boxcox(1:10, 2, 0, TRUE)
document()
library(powers)
boxcox(1:10)
boxcox(1:10, 2, 0, TRUE)
#Apply Box-Cox transformation
if (lambda == 0){
y <- log(x)
} else {
y <- ((x^lamda) - 1) / lambda
}
boxcox(1:10, 2, 0, TRUE)
#' However, since lamba is user-fed in this function, it may not necessarily result in a normal distribution. A more complex method such as
#' maximum likelihood estimate (MLE) or Newton-Raphson may be used to estimate the value of lamba required to achieve a Gaussian distribution, however
#' this is beyond the scope of this assignment.
#'
#' @param x Vector to raise to some power.
#' @param lambda Power to raise \code{x} by.
#' @param delta Amount to shift x by to ensure positive values
#' @param plot_it Display a plot of \code{x} vs the output? Use logical.
#'
#' @return The vector \code{x}, raised to the power of \code{a}.
boxcox <- function(x, lambda, delta, plot_it) {
#Test if x >0; if not, add a shift then proceed
if (delta != 0){
x <- x + delta
}
#Transform y
#If abs(lambda) > 3; then return error (this is to stop inappropriate use of the function, which is meant for only small transformations)
#Apply Box-Cox transformation
if (lambda == 0){
y <- log(x)
} else {
y <- ((x^lamda) - 1) / lambda
}
#Create plot
if (plot_it) print(ggplot2::qplot(x, y))
return(y)
}
boxcox(1:10,2,0,TRUE)
boxcox(x=1:10, lambda = 2, delta = 0, plot_it = TRUE)
library(powers)
boxcox(1:10, 2, 0, TRUE)
#' However, since lamba is user-fed in this function, it may not necessarily result in a normal distribution. A more complex method such as
#' maximum likelihood estimate (MLE) or Newton-Raphson may be used to estimate the value of lamba required to achieve a Gaussian distribution, however
#' this is beyond the scope of this assignment.
#'
#' @param x Vector to raise to some power.
#' @param lambda Power to raise \code{x} by.
#' @param delta Amount to shift x by to ensure positive values
#' @param plot_it Display a plot of \code{x} vs the output? Use logical.
#'
#' @return The vector \code{x}, raised to the power of \code{a}.
boxcox <- function(x, lambda, delta, plot_it) {
#Test if x >0; if not, add a shift then proceed
if (delta != 0){
x <- x + delta
}
#Transform y
#If abs(lambda) > 3; then return error (this is to stop inappropriate use of the function, which is meant for only small transformations)
#Apply Box-Cox transformation
if (lambda == 0){
y <- log(x)
} else {
y <- ((x^lambda) - 1) / lambda
}
#Create plot
if (plot_it) print(ggplot2::qplot(x, y))
return(y)
}
document()
library(powers)
boxcox(1:10,2,0,delta)
boxcox(1:10,2,0,TRUE)
boxcox(1:50, 1.5, 0, TRUE)
source('C:/Users/laura/Desktop/STAT 545 Exploratory Data Analysis/hw07-lsloboda/powers/R/boxcox.R', echo=TRUE)
document()
library(powers)
document()
?boxcox
library(powers)
source('C:/Users/laura/Desktop/STAT 545 Exploratory Data Analysis/hw07-lsloboda/powers/R/boxcox.R', echo=TRUE)
?boxcox
mtcars()
mtcars
head(mtcars)
lm(mpg ~ cyl, data = mtcars)
lm_model <- lm(mpg ~ cyl, data = mtcars)
plot(lm_model)
boxcox(mtcars$cyl, 2, 0, TRUE)
y
y <- boxcox(mtcars$cyl, 2, 0, FALSE)
boxcox_model <- lm(y ~ cyl, data = mtcars)
plot(boxcox_model)
document()
library(powers)
y <- boxcox(1:100, -1, 0, FALSE)
boxcox_model <- lm(y ~ cyl, data = mtcars)
plot(y)
y <- boxcox(1:100, -1, 50, TRUE)
plot(y)
boxcox(1:100, 0, 0, TRUE)
document()
library(powers)
#' Simplified Box-Cox Transformation
#'
#' This function applies an estimate of the power transformation factor (lambda) in a deterministic power function to turn non-normal data into normal data.
#' However, since lamba is user-defined in this function, it may not necessarily result in a normal distribution. A more complex method, such as
#' maximum likelihood estimate (MLE) or Newton-Raphson, may be used to estimate the value of lamba required to achieve a Gaussian distribution, however
#' this is beyond the scope of this assignment.
#'
#' @param x Initial data set.
#' @param lambda User-defined estimate of power transformation factor to make \code{x} a normal distribution.
#' @param delta Amount to shift x by to ensure positive values.
#' @param plot_it Display a plot of \code{x} vs the output. Use logical.
#' @return The vector \code{y}, which represents that transformation of \code{x} by the Box-Cox algorithm.
boxcox <- function(x, lambda, delta, plot_it) {
#Box-Cox requires positive values, so a shift value should be applied if necessary; here, the shift is the user-specified 'delta'
if (delta != 0){
x <- x + delta
}
#Apply Box-Cox transformation to obtain new 'normalized' data set; here, lambda is user-specified, so normalization is not expected
if (lambda == 0){
y <- log(x)
} else {
y <- ((x^lambda) - 1) / lambda
}
#Create plot of old vs. new data to see the transformation
if (plot_it) print(
ggplot2::qplot(x, y)
)
return(y)
}
#' @rdname boxcox
#' @export
c( ((1:100 +50) - 1))
boxcox(1:100, 1, num_vec, FALSE)
boxcox(1:100, 1, 50, FALSE)
c(log(1:100)
c(log(1:100))
log(1:100)
boxcox(1:100, 0, 0, FALSE)
(((1:100)^2) - 1) / 2)
((1:100)^2 - 1) / 2
boxcox(1:100, 2, 0, FALSE)
document()
library(devtools)
document()
boxcox <- function(x, lambda = seq(from = -3, to = 3), delta, plot_it) {
#Box-Cox requires positive values, so a shift value should be applied if necessary; here, the shift is the user-specified 'delta'
if (delta != 0){
x <- x + delta
}
#Apply Box-Cox transformation to obtain new 'normalized' data set; here, lambda is user-specified, so normalization is not expected
if (lambda == 0){
y <- log(x)
} else {
y <- ((x^lambda) - 1) / lambda
}
#Create plot of old vs. new data to see the transformation
if (plot_it) print(
ggplot2::qplot(x, y)
)
return(y)
}
boxcox(1:100, 5, 0, TRUE)
boxcox <- function(x, lambda = seq(from = -3, to = 3, by = 0.1), delta, plot_it) {
#Box-Cox requires positive values, so a shift value should be applied if necessary; here, the shift is the user-specified 'delta'
if (delta != 0){
x <- x + delta
}
#Apply Box-Cox transformation to obtain new 'normalized' data set; here, lambda is user-specified, so normalization is not expected
if (lambda == 0){
y <- log(x)
} else {
y <- ((x^lambda) - 1) / lambda
}
#Create plot of old vs. new data to see the transformation
if (plot_it) print(
ggplot2::qplot(x, y)
)
return(y)
}
> boxcox(1:100, 5, 0, TRUE)
boxcox <- function(x, lambda, delta, plot_it) {
#Set sensible defaults
if(is.null(x)){
return("Function requires a dataset, x")}
if(is.null(lambda)){
return("Function requires an estimate for lambda")}
if(is.null(delta)){
delta <- 0}
if(is.null(plot_it)){
plot_it <- TRUE}
#Box-Cox requires positive values, so a shift value should be applied if necessary
if (delta != 0){
x <- x + delta
}
#Apply Box-Cox transformation to obtain new 'normalized' data set
if (lambda == 0){
y <- log(x)
} else {
y <- ((x^lambda) - 1) / lambda
}
#Create plot of old vs. new data to see the transformation
if (plot_it) print(
ggplot2::qplot(x, y)
)
return(y)
}
boxcox()
boxcox(1:10)
boxcox(1:100, 2)
print("Function requires an estimate for lambda")
boxcox <- function(x, lambda, delta, plot_it) {
#Set sensible defaults
if(missing(x)){
return(print("Function requires a dataset"))}
if(missing(lambda)){
return(print("Function requires an estimate for lambda"))}
if(missing(delta)){
delta <- 0}
if(missing(plot_it)){
plot_it <- TRUE}
#Box-Cox requires positive values, so a shift value should be applied if necessary
if (delta != 0){
x <- x + delta
}
#Apply Box-Cox transformation to obtain new 'normalized' data set
if (lambda == 0){
y <- log(x)
} else {
y <- ((x^lambda) - 1) / lambda
}
#Create plot of old vs. new data to see the transformation
if (plot_it) print(
ggplot2::qplot(x, y)
)
return(y)
}
boxcox(1:100,2)
boxcox(1:100)
boxcox()
return(y)
boxcox <- function(x, lambda, delta, plot_it) {
#Set sensible defaults
if(missing(x)){
return(print("Function requires a dataset"))}
if(missing(lambda)){
return(print("Function requires an estimate for lambda"))}
if(missing(delta)){
delta <- 0}
if(missing(plot_it)){
plot_it <- TRUE}
#Box-Cox requires positive values, so a shift value should be applied if specified
if (delta != 0){
x <- x + delta
}
#Apply Box-Cox transformation to obtain new 'normalized' data set
if (lambda == 0){
y <- log(x)
} else {
y <- ((x^lambda) - 1) / lambda
}
#Create plot of old vs. new data to see the transformation
if (plot_it) print(
ggplot2::qplot(x, y)
)
return(y)
}
document()
x <- 1:100
plot(x)
#y <- boxcox(mtcars$cyl, -1, 0, FALSE)
#boxcox_model <- lm(y ~ cyl, data = mtcars)
#plot(boxcox_model)
x <- 1:100
y <- boxcox(x, -1, 50, TRUE)
#plot(x,y)
x <- 1:200
y <- boxcox(x, 2, 0, TRUE)
x <- 1:100
y <- boxcox(x, 1.5,)
x <- 1:200
y <- boxcox()
x <- 1:200
y <- boxcox()
z <- boxcox(x)
?boxcox
powers::square(2)
powers::boxcox(1:10, 2)
square(1:10)
cube(1:10)
reciprocal(1:10)
boxcox(1:10, 2)
document()
library(powers)
document()
library(powers)
document()
library(powers)
document()
library(powers)
